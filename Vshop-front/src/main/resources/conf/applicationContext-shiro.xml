<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
       default-lazy-init="true">
	<description>Shiro安全配置</description>

    <!-- Shiro都需要通过Realm获得安全数据(用户,角色,权限),相当于data source -->
    <bean id="accountAuthorizationRealm" class="com.Vshop.front.utils.shiro.AccountAuthorizationRealm"/>

    <!-- 用户授权信息Cache, 采用redis -->
    <bean id="shiroRedisManager" class="com.Vshop.core.auth.shiro.cache.RedisCacheManager" />

    <bean id="defaultWebSubjectFactory" class="org.apache.shiro.web.mgt.DefaultWebSubjectFactory"/>

	 <!-- Shiro的主业务层:整个Shiro下Subject的处理都通过它,相当于dispatch filter -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms">
            <list>
                <ref bean="accountAuthorizationRealm"/>
            </list>
        </property>
        <property name="sessionManager" ref="sessionManager"/>
		<property name="cacheManager" ref="shiroRedisManager" />
        <property name="subjectFactory" ref="defaultWebSubjectFactory"/>
	</bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.Vshop.core.auth.shiro.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="shiroRedisManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- Session的持久化 -->
    <bean id="redisSessionDao" class="com.Vshop.core.auth.shiro.cache.RedisSessionDAO">
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <property name="keyPrefix" value="shiro_redis_session:"/>
    </bean>

    <!-- 会话状态监听 -->
    <bean id="shiroSessionListener" class="com.Vshop.core.auth.shiro.ShiroSessionListener"/>

    <!-- 会话验证调度器, 对会话状态定时检测 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <property name="interval" value="180000"/><!-- 3min -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- Session 管理器: 负责登录后的session管理-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="360000"/> <!-- 1hour -->
        <property name="cacheManager" ref="shiroRedisManager"/>
        <property name="sessionDAO" ref="redisSessionDao"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/> <!-- 是否启用/禁用Session Id Cookie，-->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="sessionListeners" ref="shiroSessionListener"/>
    </bean>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <property name="name" value="sid"/> <!-- 设置Cookie 名字，默认为JSESSIONID -->
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="180000"/> <!-- 设置Cookie 的过期时间，秒为单位，默认-1 表示关闭浏览器时过期Cookie； -->
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 基于Form表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="loginUrl" value="/login.jsp"/>
    </bean>

	 <!-- Shiro Filter 对应web.xml的配置-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/views/login.jsp" /><!-- 登录地址 -->
		<property name="successUrl" value="/views/index.jsp" /><!-- 成功后跳转页面,默认为/-->
        <property name="unauthorizedUrl" value="/error/unauthorized.jsp" />
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            </util:map>
        </property>
		<property name="filterChainDefinitions">
			<value>
                <!-- authc 是 org.apache.shiro.web.filter.authc.FormAuthenticationFilter实例-->
                <!-- anon 是匿名用户-->
                <!-- authc 是 org.apache.shiro.web.filter.authc.UserFilter实例-->
                <!-- logout 是 org.apache.shiro.web.filter.authc.LogoutFilter实例-->
                <!--/views/index.ftl = anon-->
                <!--/views/login.ftl = anon-->
                <!--/views/logout = logout-->
                <!--/views/front/** = roles[front]-->
                <!--/views/** = user-->
                <!--/errors/** = anon-->
			</value>
		</property>
	</bean>

    <!-- Shiro生命周期处理器-->
	<!--保证实现了Shiro内部lifecycle函数的bean执行-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--使用@RequiresRoles,@RequiresPermissions等注解-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>

    <aop:config proxy-target-class="true"></aop:config>
    <bean class=" org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>